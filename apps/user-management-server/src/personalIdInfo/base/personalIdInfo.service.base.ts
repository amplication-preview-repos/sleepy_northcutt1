/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PersonalIdInfo as PrismaPersonalIdInfo,
  User as PrismaUser,
} from "@prisma/client";

export class PersonalIdInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PersonalIdInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.personalIdInfo.count(args);
  }

  async personalIdInfos<T extends Prisma.PersonalIdInfoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalIdInfoFindManyArgs>
  ): Promise<PrismaPersonalIdInfo[]> {
    return this.prisma.personalIdInfo.findMany<Prisma.PersonalIdInfoFindManyArgs>(
      args
    );
  }
  async personalIdInfo<T extends Prisma.PersonalIdInfoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalIdInfoFindUniqueArgs>
  ): Promise<PrismaPersonalIdInfo | null> {
    return this.prisma.personalIdInfo.findUnique(args);
  }
  async createPersonalIdInfo<T extends Prisma.PersonalIdInfoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalIdInfoCreateArgs>
  ): Promise<PrismaPersonalIdInfo> {
    return this.prisma.personalIdInfo.create<T>(args);
  }
  async updatePersonalIdInfo<T extends Prisma.PersonalIdInfoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalIdInfoUpdateArgs>
  ): Promise<PrismaPersonalIdInfo> {
    return this.prisma.personalIdInfo.update<T>(args);
  }
  async deletePersonalIdInfo<T extends Prisma.PersonalIdInfoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalIdInfoDeleteArgs>
  ): Promise<PrismaPersonalIdInfo> {
    return this.prisma.personalIdInfo.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.personalIdInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
