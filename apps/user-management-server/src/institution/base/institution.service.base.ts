/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Institution as PrismaInstitution,
  User as PrismaUser,
} from "@prisma/client";

export class InstitutionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstitutionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.institution.count(args);
  }

  async institutions<T extends Prisma.InstitutionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstitutionFindManyArgs>
  ): Promise<PrismaInstitution[]> {
    return this.prisma.institution.findMany<Prisma.InstitutionFindManyArgs>(
      args
    );
  }
  async institution<T extends Prisma.InstitutionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstitutionFindUniqueArgs>
  ): Promise<PrismaInstitution | null> {
    return this.prisma.institution.findUnique(args);
  }
  async createInstitution<T extends Prisma.InstitutionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstitutionCreateArgs>
  ): Promise<PrismaInstitution> {
    return this.prisma.institution.create<T>(args);
  }
  async updateInstitution<T extends Prisma.InstitutionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstitutionUpdateArgs>
  ): Promise<PrismaInstitution> {
    return this.prisma.institution.update<T>(args);
  }
  async deleteInstitution<T extends Prisma.InstitutionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstitutionDeleteArgs>
  ): Promise<PrismaInstitution> {
    return this.prisma.institution.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.institution
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
