/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { EnumAddressAddressType } from "./EnumAddressAddressType";
import { EnumAddressCountry } from "./EnumAddressCountry";
import { StringFilter } from "../../util/StringFilter";
import { EnumAddressIsland } from "./EnumAddressIsland";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class AddressWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  addressLine1?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumAddressAddressType,
  })
  @IsEnum(EnumAddressAddressType)
  @IsOptional()
  @Field(() => EnumAddressAddressType, {
    nullable: true,
  })
  addressType?: "Option1";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  city?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumAddressCountry,
  })
  @IsEnum(EnumAddressCountry)
  @IsOptional()
  @Field(() => EnumAddressCountry, {
    nullable: true,
  })
  country?: "Option1";

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumAddressIsland,
  })
  @IsEnum(EnumAddressIsland)
  @IsOptional()
  @Field(() => EnumAddressIsland, {
    nullable: true,
  })
  island?: "Option1";

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  postalCode?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;
}

export { AddressWhereInput as AddressWhereInput };
